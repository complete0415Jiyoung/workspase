10_Exception (예외처리)

[프로그램 오류] - 프로그램 수행시 치명적 상황이 발생하여 ,
	비정상적으로 프로그램이 종료하는 상황
	(== 프로그램 에러 라고도 함)

	- 컴파일러 에러 : 소스 코드상 문법에러/ 소스 코드 수정으로 해결 
	- 런타임에러 : 실행중 발생하는 에러 
		주로 if문으로 해결 가능 
		(배열 인덱스 범위 벗어났거나, 계산식 오류) 
	- 시스템에러 : 컴퓨터 오작동

***예외: 소스 수정으로 해결이 가능한 에러 
	-> 예측가능한 구문을 처리하는 방법인 예외처리를 통해 해결이 가능하다

* Exception 클래스 : 예외 클래스의 최고 조상
	    	UnChecked Exception : 선택적 예외클래스 
				Runtime Exception
	Exception				InputMismatchException : 잘못된 문자 입력
					AricthmeticException : 산술적 예외
		ChechedException : 필수적 예외처리 

*사용자 정의 예외 : throws 호출한 메소드에 예외를 던지다
		(=> 호출한 메소드에게 예외 처리하라고 위임한 것)

getClass() : 어떤 예외클래스인가?
getMessage(): 예외 발생시 출력되는 내용
printStactrace(): 예외가 발새 되기 까지 모든 메소드 호출 


* try -catch문 예외처리 
	try{ } : 예외가 발생할 가능성 있는 코드 괄호에 작성
	catch(예외){  }: try 구문에서 발생한 예외를 잡아내서
		 처리하여 프로그램이 비정상 종료 되지 않도록  함