*상속 
- 자식 클래스에 공통된 부분을 추출하여 부모클래스를 만드는 것 
--> 공통된 필드, 메소드를 가진 클래스를 만들고 
     작성된 코드를 자식들이 물려 받아 사용
  (코드길이 감소, 코드 중복 제거, 재사용성 증가, 자식에 대한 일관된 규칙 제공)



* [일반 클래스] 상속 
- 부모 클래스도 객체로 만들 수 있어야하는 경우  
	ex) (부모) 갤럭시 22	 (자식) 갤럭시 22 울트라



* [추상클래스] 상속
- ★연관된 클래스★의 공통점을 묶어두되
  부모 클래스는 객체로 만들 수 없는 경우 
	ex) Animal 클래스
	- 동물 객체는 어떤 동물인가 ? eat() breath()는 어떻게 수행되는 가? 
	--> 알수 없음. 하지만 동물의 공통된 기능 명은 알고 있음

+ 일부 미완성 클래스 ( abstract 메소드 0개 이상 포함) 
		--> abstract 메소드가 없어도 클래스를 객체로 못 만들게 하고 싶은 경우가 있음
		
		ex) 계산기 (+, -,*,/)-> 기본 기능을 가지고 있지만 이것만 가지고 씃 곳이 없음 
			->abstract로 만들어서 객체 생성을 막아둠 
		또는 의미적으로 막아두는 경우 
		ex) Biology - 생물 객체는 어떤 생물인가?



*[인터페이스] 상속
  interface : 접점
- ★연관성이 낮거나 없는★ 클래스들에게 공통된 기능을 제공할때 사용 

	ex) 키보드, 마우스,스캐너, 카메라, 압력센서, 기울기 센서
	--> 입력 장치(각각의 용도는 다르지만 "입력"이라는 공통된 "기능 명"이 있을 뿐)

+ 모든 필드(변수)가 묵시적 (암묵적) public static final
	ex) public static final double p1 = 3.141592;
  	  /*public static final*/ int MAX_NUM = 10000;

+ 모든 메소드가 묵시적으로 public abstract (추상메소드)

	ex) /*public abstract*/ void input();// "input"이라는 이름을 자식에게 제공할 뿐
			//상세한 기능은 자식이 알아서 오버라이딩 해라 
			//그런데 추상메소드니까 오버라이딩 강제화!

(참고) 인터페이스 활용 용도 
- default 메소드 : 상속 받은 클래스에 공통기능 제공
--> 자바 함수 지향 언어 사용을 위한 메소드 

+ 람다, 스트림에 사용 
+ Spring AOP Proxy 사용 

